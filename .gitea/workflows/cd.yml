name: FunPot Core CD

on:
  workflow_run:
    workflows: ["FunPot Core CI"]
    types:
      - completed

permissions:
  contents: read

env:
  REGISTRY_URL: ${{ secrets.REGISTRY_URL }}
  REGISTRY_REPOSITORY: ${{ secrets.REGISTRY_REPOSITORY }}

defaults:
  run:
    shell: bash
    
jobs:
  publish-and-deploy:
    name: Deploy to ${{ matrix.environment }}
    runs-on: ubuntu-latest
    container:
      image: docker.gitea.com/runner-images:ubuntu-latest
    environment: ${{ matrix.environment }}
    strategy:
      matrix:
        include:
          - environment: development
            branch: dev
            webhook_secret: DEV_DEPLOY_WEBHOOK_URL
            healthcheck_secret: DEV_DEPLOY_HEALTHCHECK_URL
            healthcheck_timeout: 240
            healthcheck_interval: 5
          - environment: production
            branch: main
            webhook_secret: PROD_DEPLOY_WEBHOOK_URL
            healthcheck_secret: PROD_DEPLOY_HEALTHCHECK_URL
            healthcheck_timeout: 420
            healthcheck_interval: 10
    if: >-
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.event == 'push' &&
      github.event.workflow_run.head_branch == matrix.branch
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Verify registry configuration
        run: |
          set -euo pipefail
          if [ -z "${REGISTRY_URL:-}" ] || [ -z "${REGISTRY_REPOSITORY:-}" ]; then
            echo "Registry URL or repository secret is missing." >&2
            exit 1
          fi

      - name: Log in to registry
        env:
          REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
          REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
        run: |
          set -euo pipefail
          if [ -z "${REGISTRY_USERNAME:-}" ] || [ -z "${REGISTRY_PASSWORD:-}" ]; then
            echo "Registry credentials are not configured." >&2
            exit 1
          fi
          echo "$REGISTRY_PASSWORD" | docker login "$REGISTRY_URL" --username "$REGISTRY_USERNAME" --password-stdin

      - name: Resolve image reference
        id: image
        env:
          HEAD_SHA: ${{ github.event.workflow_run.head_sha }}
        run: |
          set -euo pipefail
          IMAGE_REF="${REGISTRY_URL}/${REGISTRY_REPOSITORY}:${HEAD_SHA}"
          echo "image_ref=$IMAGE_REF" >>"$GITHUB_OUTPUT"

      - name: Verify published image
        env:
          IMAGE_REF: ${{ steps.image.outputs.image_ref }}
        run: |
          set -euo pipefail
          docker pull "$IMAGE_REF"

      - name: Trigger environment webhook
        env:
          IMAGE_REF: ${{ steps.image.outputs.image_ref }}
          WEBHOOK_URL: ${{ secrets[matrix.webhook_secret] }}
          ENVIRONMENT: ${{ matrix.environment }}
          BRANCH: ${{ matrix.branch }}
          HEAD_SHA: ${{ github.event.workflow_run.head_sha }}
        run: |
          set -euo pipefail
          if [ -z "${WEBHOOK_URL:-}" ]; then
            echo "Webhook URL secret '${{ matrix.webhook_secret }}' is missing." >&2
            exit 1
          fi
          cat <<EOF >payload.json
{
  "environment": "${ENVIRONMENT}",
  "branch": "${BRANCH}",
  "image": "${IMAGE_REF}",
  "sha": "${HEAD_SHA}"
}
EOF
          curl -fsSL -X POST -H 'Content-Type: application/json' --data @payload.json "$WEBHOOK_URL"

      - name: Resolve healthcheck target
        id: healthcheck
        env:
          HEALTHCHECK_URL: ${{ secrets[matrix.healthcheck_secret] }}
        run: |
          set -euo pipefail
          if [ -z "${HEALTHCHECK_URL:-}" ]; then
            echo "url=" >>"$GITHUB_OUTPUT"
            exit 0
          fi
          echo "url=$HEALTHCHECK_URL" >>"$GITHUB_OUTPUT"

      - name: Wait for deployment healthcheck
        if: ${{ steps.healthcheck.outputs.url != '' }}
        env:
          HEALTHCHECK_URL: ${{ steps.healthcheck.outputs.url }}
          TIMEOUT_SECONDS: ${{ matrix.healthcheck_timeout }}
          INTERVAL_SECONDS: ${{ matrix.healthcheck_interval }}
        run: |
          set -euo pipefail
          : "${TIMEOUT_SECONDS:=180}"
          : "${INTERVAL_SECONDS:=5}"
          attempt=1
          max_attempts=$(( (TIMEOUT_SECONDS + INTERVAL_SECONDS - 1) / INTERVAL_SECONDS ))
          while [ "$attempt" -le "$max_attempts" ]; do
            if curl -fsSL "$HEALTHCHECK_URL" >/dev/null; then
              echo "Deployment is healthy at attempt $attempt"
              exit 0
            fi
            echo "Attempt $attempt/${max_attempts}: service not ready yet"
            sleep "$INTERVAL_SECONDS"
            attempt=$((attempt + 1))
          done
          echo "Deployment did not become healthy before timeout (${TIMEOUT_SECONDS}s)." >&2
          exit 1
